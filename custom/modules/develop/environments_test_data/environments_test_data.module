<?php
/**
 * @file
 * Intergrate environment with test data.
 */

define('ENVIRONMENT_TEST_DATA_PACKAGE', 'Test data');

/**
 * Implements of hook_environment_switch().
 *
 * @param string $target_env
 *   enviroment to enable
 * @param string $current_env
 *   enviroment current
 *
 * @return void
 *   void
 */
function environments_test_data_environment_switch($target_env, $current_env) {
  $test_data_modules = environments_test_data_get_features();
  $test_data_modules = environments_custom_module_exist($test_data_modules);
  switch ($target_env) {
    case ENVIRONMENT_DEVELOPMENT:
      module_enable($test_data_modules);
      drupal_set_message(t('Enabled test modules: <br />@modules', array(
        '@modules' => implode(', ', $test_data_modules),
      )));
      break;

    case ENVIRONMENT_PRODUCTION:
    case ENVIRONMENT_DEBUG:
    case ENVIRONMENT_STAGING:
    default:
      environments_test_data_delete();
      module_disable($test_data_modules);
      drupal_set_message(t('Disabled test modules: <br />@modules', array(
        '@modules' => implode(', ', $test_data_modules),
      )));
      break;
  }
  features_revert();
  features_revert();
  return;
}

/**
 * Provide list of modules with development packages
 *
 * @param bool $reset
 *   Reset flag
 *
 * @return array
 *   list of the modules
 */
function environments_test_data_get_features($reset = FALSE) {
  $result = &drupal_static(__FUNCTION__, array(), $reset);

  if (empty($result)) {
    foreach (features_get_features() as $module_name => $module_data) {
      if ($module_data->info['package'] == ENVIRONMENT_TEST_DATA_PACKAGE) {
        $result[$module_name] = $module_name;
      }
    }
  }
  return $result;
}

/**
 * Delete all test content
 */
function environments_test_data_delete() {
  $bundles = field_info_bundles();
  $modules = environments_test_data_get_features();
  foreach ($modules as $module) {
    $data = features_get_info('feature', $module);
    foreach ($data->info['features'] as $key => $values) {
      foreach ($bundles as $bundle => $types) {
        if ($key == "uuid_$bundle") {
          foreach ($values as $value) {
            entity_uuid_delete($bundle, $value);
          }
        }
      }
    }
  }
}
